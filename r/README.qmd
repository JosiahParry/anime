---
format: gfm
---

For local development run this in the `r` directory:

```{r}
devtools::load_all()
```

You may also want to install it locally:

```{r}
#| eval: false
devtools::install()
```

And clean up previous builds:

```{r}
#| eval: false
rextendr::clean()
```

```{r}
library(dplyr)
```

Basic test

```{r}
x = sf::read_sf("data-raw/geojson/princes_street_minimal_x_1.geojson")
x = x |> sf::st_transform("EPSG:27700")
y = sf::read_sf("data-raw/geojson/princes_street_minimal.geojson")
y = y |> sf::st_transform("EPSG:27700")
```

```{r}
#| label: fig-x-and-y
bind_rows(
  x |>
    transmute(value = "x"),
  y |>
    transmute(value = as.character(value))
) |>
  plot(lwd = 5)
```


```{r}
matched_df = rnet_match(x, y, dist_tolerance = 20, slope_tolerance = 0.1, trees = "xy")
y_to_match = y |>
  transmute(j = 1:n(), value) |>
  sf::st_drop_geometry() 
matched_df_y = left_join(matched_df, y_to_match)
x$length_x = sf::st_length(x) |>
  # Drop units:
  units::drop_units()
x_to_match = x |>
  transmute(i = 1:n(), length_x) |>
  sf::st_drop_geometry()
matched_df_xy = left_join(matched_df_y, x_to_match)
x_formula = matched_df_xy |>
  mutate(value_formula = value * shared_len / length_x)
x_formula
x_with_values = x_formula |>
  group_by(id = i) |>
  summarise(
    value = sum(value_formula),
    length_x = first(length_x)
    )
x_joined = left_join(x, x_with_values)
```

The total length travelled on each network can be calculated as follows:

```{r}
total_distance_x = sum(x_joined$value * x_joined$length_x)
round(total_distance_x)
```

And for `y`:

```{r}
total_distance_y = sum(as.numeric(y$value * sf::st_length(y)))
```

We can post process the joined x network to get the total length travelled on each network:

```{r}
x_joined = x_joined |>
  mutate(value = value * total_distance_y / total_distance_x)
```

That results in these values:

```{r}
x_joined$value
round(x_joined$value)
```

```{r}
#| label: fig-x_joined
y |>
  select(value) |>
  plot(lwd = 5)
x_joined |>
  select(value) |>
  plot(lwd = 5)
```

```{r}
```

```{r}
```